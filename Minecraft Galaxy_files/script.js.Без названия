var editControl = "message"
var canGoTo = true;
$(document).ready(function(){
	$('.main-logo').bind('click', function(){
		$('.main-logo').addClass('main-logo-clicked');
		$('.main-logo').html('<div class="logo-popup">Ссылка на главную страницу чуть правее :-Ь</div>')
		setInterval(function(){
			$('.main-logo').removeClass('main-logo-clicked');
			$('.main-logo').html('');
		}, 5000);
	});
	$('.top-block').bind('click', function(){
		$('html,body').animate({
			scrollTop : 0
		}, 100);
		return false;
	});
	
	$(window).bind('scroll', function(){
		if($(window).scrollTop() > 100){
			$('.top-block').fadeIn('fast');
			$('.fixed-panel').fadeIn('fast');
		}
		else{
			$('.top-block').fadeOut('fast');
			$('.fixed-panel').fadeOut('fast');
		}
	});
	
	bindText();
	
	var pages = $('.navigate .pages');	
	if(pages.length > 0){
		if(pages.find("a").length == 0)
			pages.hide()
			
		$(window).bind('keyup', function(event){
			if(event.ctrlKey && !event.shiftKey && canGoTo){
				if(event.keyCode == 39 || event.which == 39 || event.which == 63235){
					var href = pages.find('.current').next();
					if(href.length > 0 && href.attr('href'))
						window.location = href.attr('href');
				}
				else if(event.keyCode == 37 || event.which == 37 || event.which == 63234){
					var href = pages.find('.current').prev();
					if(href.length > 0 && href.attr('href'))
						window.location = href.attr('href');
				}
			}	
		});
	}
	
	$('input[type=checkbox]').wrap(function(){
		if($(this).parent().is('label')){
			$(this).parent().addClass('qu');
		}
		else{
			return '<label class="qu">' + $(this).text() + '</label>';
		}
	});
	$('input[type=checkbox]').after('<span></span>');

	comments_list = $('.comment-own');
	$('.blog-navi a').eq(0).attr('title', 'ctrl + ↑');
	$('.blog-navi a').eq(1).attr('title', 'ctrl + ↓');

	if(comments_list.length > 0){
		$(window).bind('keyup', function(event){
			if(event.ctrlKey){
				if(event.which == 40 || event.keyCode == 40)
					next_comment();
				else if(event.which == 38 || event.keyCode == 38)
					prev_comment();
			}
		})
	}
	else{
		$('.blog-navi').hide();
	}
	
	$(window).bind('keyup', function(event){
		if(canGoTo && event.ctrlKey && (event.which==13 || event.keyCode==13)){
			var txt = '';
			if (window.getSelection) {
				txt = window.getSelection();
			}
			else if (document.getSelection){
				txt = document.getSelection();
			}
			else if (document.selection){
				txt = document.selection.createRange().text;
			}
			
			if(txt != ''){
				txt = '[quote]' + txt + '[/quote]\n';
			}
			
			if($('#fastmess').length == 0){
				$('body').append('<div id="fastmess" class="fast-message">Если Вы заметили ошибку на этой странице, можете написать об этом в поле ниже, ошибка будет исправлена. <br/><br/><textarea name="text" style="width:470px;height:120px;">' + txt + '</textarea></div>');
			}
			else{
				$('#fastmess textarea').val(txt);
			}
			
			$('#fastmess').dialog({
				title:"Отправить сообщение",
				resizable:false,
				modal: true,
				width: 505,
				height: 300,
				zIndex: 10,
				buttons: [
					{
						text: "Отменить",
						click: function() {$(this).dialog("close");}
					},
					{
						text: "Отправить",
						click: function() {
							var txt = $('#fastmess textarea').val();
							$.post("/fastmessages/0/add", { text : txt }, function(data){
								$('#fastmess textarea').val('');
							})
							$(this).dialog("close");
						}
					}
				]
			});
		}
	});
	$(window).bind('click', function(event){
		if(!$(event.target).hasClass('arrow')){
			$('.submenu').fadeOut('fast');
			$('.submenu').prev().removeClass('button-active');
		}
		if(!$(event.target).hasClass('mobile-menu') && !$(event.target).hasClass('mobile-menu-item')){
			$('.mobile-showen-menu-back').hide();
			$('.mobile-showen-menu').hide();
			$('html').css('overflow', 'auto');
		}
	});
	$('.mobile-showen-menu-back').bind('click', function (){
		$('.mobile-showen-menu-back').hide();
		$('.mobile-showen-menu').hide();
		$('html').css('overflow', 'auto');
	});
	$('.mobile-menu').click(function(){
		$('.mobile-showen-menu-back').show();
		$('.mobile-showen-menu').show('fast');
		$('html').css('overflow', 'hidden');
	});
	
	$('.mobile-menu-item').click(function (){
		if($(this).next().hasClass('dropdown-mobile')){
			$(this).next().slideToggle();
			return false;
		}
		return true;
	});

	delete $.getScript;
});

function check_all(obj){
	if($(obj).attr('checked') == 'checked'){
		$(obj).parents('.topics').find('tr td .multi').attr('checked', 'checked');
	}
	else{
		$(obj).parents('.topics').find('tr td .multi').removeAttr('checked');
	}
	
}

function multi_action(url){
	console.log(data = $('.topics').find('tr td .multi').serializeArray());
	$.post(url, data, function(){
		window.location = window.location;
	});
}

function show_submenu(obj, quake){
	var item = $(obj).parent();
	var sub = item.parent().find('.submenu');
	if(!item.hasClass('button-active')){
		$(window).click();
	}
	sub.fadeToggle('fast');
	item.toggleClass('button-active');
	if(quake){
		var def = item.width() - sub.width();
		if(def >= -2){
			sub.width(item.width() + 4);
		}
		else{
			sub.css('margin-left', (def + 4) + 'px');
		}
	}
	else{
		var def = item.width() - sub.width();
		sub.css('margin-left', (def + 19)/2 + 'px');
	}
}

function bindText(){
	$('textarea').bind('focus', function(){
		canGoTo = false;
	});
	$('textarea').bind('blur', function(){
		canGoTo = true;
	});
	
	$('input[type=text]').bind('focus', function(){
		canGoTo = false;
	});
	$('input[type=text]').bind('blur', function(){
		canGoTo = true;
	});
}

var current_comment = -1;
var comments_list;
function next_comment(){
	if(comments_list.length > 0){
		if(current_comment == comments_list.length - 1)
			current_comment = 0;
		else
			current_comment++;
		
		$(document).scrollTop(comments_list.eq(current_comment).offset().top + 40);
	}
}

function prev_comment(){
	if(comments_list.length > 0){
		if(current_comment == 0)
			current_comment = comments_list.length - 1;
		else
			current_comment--;
		$(document).scrollTop(comments_list.eq(current_comment).offset().top + 40);
	}
}

function show_desc(obj){
	$(obj).next().slideToggle('fast');
}

function block_button(obj){
	//$(obj).attr('disabled', 'disabled');
	//$(obj).parents('form').eq(0).submit();
}

function add_topic(id) {
	msgform = document.getElementById("form-panel");
	msgform.style.display = "block"
    
	document.getElementById("forum-id").value = id

	document.getElementById("tools").style.display = "none"
	
	setInputControl("message");
	document.getElementById("formatTools").innerHTML = formatToolsSerialize;
}


function add_vote_simple() {
        var text = 
        '           <div class="title">Вопрос</div>'+
        '           <div class="control"><input type="text" name="votenam" /></div>'+
        '           <div class="title">Список вариантов (по одному ответу на каждой новой строке)</div>'+
        '           <div class="control"><textarea name="votevar" style="height: 100px;" id="votevar"></textarea></div>';
        document.getElementById("votetools").parentNode.parentNode.innerHTML = text+'';
}

var formVisible = false;

function setInputControl(id) {
	editControl = id
	$("#" + editControl).on("focus", function(){ editControl = this.id; });
	beginBackupText();
	formVisible = true;
}

function add_post(id) {
	msgform = document.getElementById("form-panel");
	msgform.style.display = "block"

	obj = document.getElementById("topic-id")
	if(obj) obj.value = id

	document.getElementById("tools").style.display = "none"
	
	setInputControl("message");
	document.getElementById("formatTools").innerHTML = formatToolsSerialize;
}

function show_message_form(id) {
	msgform = document.getElementById(id);
	msgform.style.display = "block"

	document.getElementById(id + "-tools").style.display = "none"
	
	setInputControl(id + "-message");
	document.getElementById(editControl + "-formatTools").innerHTML = formatToolsSerialize;
}

function make_user_link(login, group, id) {
	return "<a href=\"/profilemain/" + id + "\" class=\"" + (group ? group : "guest") + "\" onmouseover='showtip(1, " + id + ", event)' onmouseout='hidetip()'>" + login + "</a>";
}
		
function on_edit_post() {
	if(this.readyState == 4 && this.status == 200) {
		p = document.getElementById("peditor" + this.pid)
		p.value = this.responseText
	}
}

function proc_answer() {
	if(this.readyState == 4 && this.status == 200) {
    	this.callback(this) 
	}
}

function ajax_post_request(url, data, callback) {
	req = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
	req.onreadystatechange = proc_answer;
	req.open("POST", url, true);
	req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
	req.send(data);
	req.callback = callback;
	return req
}

function ajax_get_request(url, proc) {
	req = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
	req = new XMLHttpRequest();
	req.onreadystatechange = proc;
	req.open("GET",url, true);
	window.XMLHttpRequest ? req.send(null) : req.send();
	
	return req
}

function edit_post(id) {
	p = document.getElementById("p" + id)
	p["bp"] = p.innerHTML
	editControl = "peditor" + id
	p.innerHTML = formatToolsSerialize + '<textarea class="post-editor" id="peditor' + id + '"></textarea><div class="post-editor-cmd"><a href="javascript: edit_post_save(' + id + ');">сохранить</a> | <a href="javascript: edit_post_cancel(' + id + ');">отменить</a></div>'
	r = ajax_get_request("?ep=" + id, on_edit_post)
	r['pid'] = id;
	beginBackupText();
}

function on_mute_user() {
	if(this.readyState == 4 && this.status == 200) {
		if(this.responseText == "1")
			alert('Пользователь заблокирован')
		else
			alert('Пользователь разблокирован')
	}
}

function mute_user(id) {
	ajax_get_request("?mute=" + id, on_mute_user)
}

function edit_post_cancel(id) {
	p = document.getElementById("p" + id)
	p.innerHTML = p["bp"]
}

function on_edit_post_save(obj) {
	p = document.getElementById("p" + obj.pid)
	p.innerHTML = obj.responseText
}

function edit_post_save(id) {
	p = document.getElementById("peditor" + id)
	r = ajax_post_request("?sp=" + id, "text=" + encodeURIComponent(p.value), on_edit_post_save)
	r['pid'] = id
	edit_post_cancel(id)
}

function del_topic() {
	return confirm("Вы уверены, что хотите удалить этот топик?");
}

function selectText(obj) {
  if(document.selection) { // IE, Opera
    return document.selection.createRange().text
  }else {
    sel = document.getSelection().toString();
    return (sel ? sel : obj.value.substr(obj.selectionStart,obj.selectionEnd - obj.selectionStart))
  }
}
function setSelectText(obj, text) {
  if(document.selection) { // IE, Opera
    document.selection.createRange().text = text
  } else {
    b = obj.value.substr(0, obj.selectionStart)
    a = obj.value.substr(obj.selectionEnd)
    obj.value = b + text + a
  }
}

function setAllSelection(id){ 
	var target = document.getElementById(id);
	var rng, sel;
	if (document.createRange) {
		rng = document.createRange();
		rng.selectNode(target)
		sel = window.getSelection();
		sel.removeAllRanges();
		sel.addRange(rng);
	} 
	else {
		var rng = document.body.createTextRange();
		rng.moveToElementText(target);
		rng.select();
	}
}
function quote(id, user){
	if(!formVisible)
		add_post();
	if(selectText(document.getElementById(editControl)) == "")
		setAllSelection(id);
	onPaste("[quote=" + user + "]%s[/quote]\n|");
}

function onPaste(arg1) {
	var t = document.getElementById(editControl);
	res4094 = arg1.replace('%s', selectText(t));
	var curPos = res4094.indexOf('|');
	res4094 = res4094.replace('|', '');
	t.focus();
	var start = getSelectionStart(t)  + curPos;
	setSelectText(t,res4094)
	t.setSelectionRange(start,start);
}

function getSelectionStart(el){
	if (el.selectionStart) { 
		return el.selectionStart; 
	} 
	else if (document.selection) { 
		el.focus(); 
		
		var r = document.selection.createRange(); 
		if (r == null) { 
		  return 0; 
		} 
		
		var re = el.createTextRange(), 
		    rc = re.duplicate(); 
		re.moveToBookmark(r.getBookmark()); 
		rc.setEndPoint('EndToStart', re); 
		
		return rc.text.length; 
	}
	return 0;
}

function switchTable(arg1) {
  ln4021 = $(arg1).next();
  if(ln4021.css('display') != "block") {
    ln4021.slideDown("fast")
    $(arg1).find('._plus').attr('src', "/img/icon_minus.gif");
  }
  else {
    ln4021.slideUp("fast")
    $(arg1).find('._plus').attr('src', "/img/icon_plus.gif");
  }
}

function switchSpoilerTree(arg1) {
  ln4021 = $(arg1).parent().next();
  if(ln4021.css('display') != "block") {
    ln4021.slideDown("fast")
    $(arg1).attr('src', "/img/icon_minus.gif");
  }
  else {
    ln4021.slideUp("fast")
    $(arg1).attr('src', "/img/icon_plus.gif");
  }
}

function switchTableAdult(arg1) {
	ln4021 = $(arg1).next();
	if(ln4021.css('display') != "block") {
		if(confirm("Контент, который вы пытаетесь посмотреть расчитан только на лица, достигших 18 лет и более. Нажимая кнопку ОК вы подтверждаете это берете всю ответственность за просмотр на себя!")) {
			ln4021.slideDown("fast")
			$(arg1).find('._plus').attr('src', "/img/icon_minus.gif");
		}
	}
	else {
		ln4021.slideUp("fast")
		$(arg1).find('._plus').attr('src', "/img/icon_plus.gif");
	}
}

function on_load_spiler() {
	if(this.readyState == 4 && this.status == 200) {
		var arr = JSON.parse(this.responseText);
		var p = document.getElementById(this.sid);
		
		var res = "<table><tr><td style=\"width: 100px;\">Мир</td><td style=\"width: 30px;\">Занято</td><td>Online</td></tr>";
		for(var i in arr) {
			var world = arr[i];
			var color = "premium";
			if(world.build > 80)
				color = "admins";
			else if(world.build > 50)
				color = "vip";
			res += '<tr><td><div style="color: #ddf;">' + world.name + '</div></td><td class="' + color + '">' + Math.round(world.build) + '%</td><td>';
			var users = "";
			for(var j in world.users) {
				var u = world.users[j];
				if(users) users += ", ";

                users += make_user_link(u.login, u.group, u.id);
			}
			if(world.users.length == 0)
                users = '<span class="free">(нет)</span>';
			res += users;
		}
		p.innerHTML = res + "</td></tr></table>";
	}
}

function switchTablePreload(arg1, id, cmd) {
  ln4021 = arg1.parentNode.lastChild;
  if(ln4021.style.display != "block") {
    ln4021.style.display = "block";
    arg1.firstChild.src = "/img/icon_minus.gif";
	r = ajax_get_request("/main/" + id + "/" + cmd, on_load_spiler)
	r['sid'] = cmd + "-" + id
	p = document.getElementById(r['sid'])
	p.innerHTML = '<img src="/img/ajax-loader.gif"/>'
  }
  else {
    ln4021.style.display = "none";
    arg1.firstChild.src = "/img/icon_plus.gif";
  }
}

function send_money(obj) {
//	window.open($(obj).attr('href'), "sndgold", "menubar=no,location=no,width=480,height=370")
	$("#send-gold").dialog({
		title:"Пересылка Gold",
		modal:true,
		resizable:false,
		width: 400
//		buttons: [
//			{
//				text: "Ok",
//				click: function() {
//					// TODO
//					$("#user-select").dialog("close");
//				}
//			}
//		]
	})
}

function on_protect_home() {
	if(this.readyState == 4 && this.status == 200) {
		p = document.getElementById("h-" + this.hid)
		if(this.responseText == "0")
			p.src = "http://icons.mcgl.ru/img/4/2169_tick_shield.png"
		else if(this.responseText == "-1")
			p.src = "http://icons.mcgl.ru/img/4/2067_shield_disable.png"
		else
			switch(parseInt(this.responseText)) {
				case 1:alert("Вы не являетесь владельцем зоны");break;
				case 2:alert("Зона не найдена");break;
				case 3:alert("Ваше время игры менее 10 часов");break;
				default:alert("Вы не можете ставить защиту на эту зону");
			}
	}
}

function protect_home(id) {
	r = ajax_get_request("/zones/" + id + "/protect", on_protect_home)
	r['hid'] = id
}

function protect_home(id) {
	r = ajax_get_request("/zones/" + id + "/protect", on_protect_home)
	r['hid'] = id
}

function finduser() {
	//window.open("/finduser.html", "finduser", "menubar=no,location=no,width=480,height=370")
	onuserselect('', tag_user_select);
}

function youtube_paste() {
	cb = document.getElementById("youtubedlg")
	if(!cb) {
		cb = document.createElement("div")
		cb.id = "youtubedlg"
		cb.style.display = "none"
		$('body').append(cb)
		$(cb).append('Введите уникальный идентификатор видео (например, 5Dsddo55gSw): <input class="text" id="yt-url"/>')
		$(cb).append('<br/><br/><label><input class="checkbox" type="checkbox" id="yt-adult"/> видео содержит материалы для лиц от 18 лет (мат, насилие и т.п.)</label>')
		$(cb).append('<br/><br/>Предпросмотр:<div class="yt-preview"></div>')
		$('#yt-url').keyup(function(){
			$('.yt-preview').html("<iframe width=\"600\" height=\"400\" src=\"http://www.youtube.com/embed/" + $(this).val() + "\" frameborder=\"0\" allowfullscreen></iframe>")
		})
	}
	
	$(cb).dialog({
		title:"Вставка ролика с YouTube",
		resizable:false,
		width: 630,
		height: 630,
		zIndex: 10,
		buttons: [
			{
				text: "Отменить",
				click: function() {
					$(this).dialog("close");
				}
			},
			{
				text: "Вставить",
				click: function() {
					if($('#yt-adult').attr('checked'))
						onPaste("[youtube adult=Контент не для всех.]" + $('#yt-url').val() + "[/youtube]|");
					else
						onPaste("[youtube]" + $('#yt-url').val() + "[/youtube]|");
					$(this).dialog("close");
				}
			}
		]
	})
}

function achive_paste() {
	cb = document.getElementById("achivedlg")
	if(!cb) {
		cb = document.createElement("div")
		cb.id = "achivedlg"
		cb.style.display = "none"
		$('body').append(cb)
		$(cb).append('Введите короткое название достижения: <input class="text" id="ah-name"/>')
		$(cb).append('<br/><br/>Введите описание достижения: <input class="text" id="ah-info"/>')
		$(cb).append('<br/><br/>Введите полученный опыт (целое число): <input class="text" id="ah-exp"/>')
		$(cb).append('<br/><br/>Предпросмотр:<div class="ah-preview"></div>')
		$('#ah-exp,#ah-name,#ah-info').keyup(function(){
			$('.ah-preview').html("<table class=achive><tr>" +
						"<td rowspan=2 class=\"img frame\"><img src=\"http://icons.mcgl.ru/img/8/4519_icon95.ico\"></td>" +
						"<td class=title>" + $("#ah-name").val() + "</td><td rowspan=2 class=score>+" + $("#ah-exp").val() + "XP</td>" +
					"</tr><tr><td class=descr>" + $("#ah-info").val() + "</td></tr></table>")
			})
	}
	
	$(cb).dialog({
		title:"Вставка достижения",
		resizable:false,
		width: 500,
		height: 350,
		zIndex: 10,
		buttons: [
			{
				text: "Отменить",
				click: function() {
					$(this).dialog("close");
				}
			},
			{
				text: "Вставить",
				click: function() {
					onPaste("[achieve=" + $("#ah-name").val() + " score=+" + $("#ah-exp").val() + "XP]" + $("#ah-info").val() + "[/achieve]|")
					$(this).dialog("close");
				}
			}
		]
	})
}

function createImage(source, blob) {
	// let pastedImage = new Image();
	// pastedImage.onload = function() {
		let fData = new FormData();
		let file = new File([blob], "capture.png", {
			type: 'image/png'
		});
		fData.append('file', file);
		jQuery.ajax({
			type: 'POST',
			enctype: 'multipart/form-data',
			url: "https://i.mcgl.ru/up?url",
			data: fData,
			processData: false,
			contentType: false,
			success: function(data) {
				$("#img-url").val("https://i.mcgl.ru/" + data)
				image_paste_preview()
				//$("#" + pasteId).val($("#" + pasteId).val() + "\n[preview=" + data + "]");
			}
		});
	// };
	// pastedImage.src = source;
	// $('.img-preview').append(pastedImage);
}

function pasteHandler(e) {
// если поддерживается event.clipboardData (Chrome)
	if (e.clipboardData) {
		// получаем все содержимое буфера
		let items = e.clipboardData.items;
		if (items) {
			// находим изображение
			for (let i = 0; i < items.length; i++) {
				if (items[i].type.indexOf("image") !== -1) {
					// представляем изображение в виде файла
					let blob = items[i].getAsFile();
					// создаем временный урл объекта
					let URLObj = window.naviteURL || window.webkitURL || window.URL;
					let source = URLObj.createObjectURL(blob);
					// добавляем картинку в DOM
					createImage(source, blob);
				}
			}
		}
		// для Firefox проверяем элемент с атрибутом contenteditable
	} else {
		//setTimeout(checkInput, 1);
	}
}

window.addEventListener("paste", pasteHandler);

function image_paste_preview() {
	let s = ""
	if($('#img-info').val()) {
		s = "<div class=\"scroll\"><div class=\"scroll-head\" onclick=\"switchTable(this);\"><img src=\"/img/icon_plus.gif\" class=\"_plus\"> " + $('#img-info').val() + "</div><div class=\"scroll-body\">";
	}
	let imgURL = $('#img-url').val()
	if (imgURL.indexOf("i.mcgl.ru") > 0)
		$("#std-preview").fadeIn()
	else
		$("#std-preview").fadeOut()

	if ($("#std-preview input")[0].checked)
		imgURL += "?p"
	s += "<img src=\"" + imgURL + "\"/>";
	if($('#img-info').val()) {
		s += "</div></div>";
	}
	$('.img-preview').html(s)
}

function image_paste() {
	let cb = document.getElementById("imagedlg")
	if(!cb) {
		cb = document.createElement("div")
		cb.id = "imagedlg"
		cb.style.display = "none"
		$('body').append(cb)
		$(cb).append('Введите URL картинки или нажмите Ctrl+V для вставки: <input class="text" id="img-url"/>')
		$(cb).append('<br/><br/>Введите комментарий к картинке(не обязательно): <input class="text" id="img-info"/>')
		$(cb).append('<br/><div id="std-preview" style="display: none"><br/><div style="display: flex; align-items: center;">Вставка превью вместо изображения: <input type="checkbox" style="width: 50px"></div></div>')
		$(cb).append('<br/>Предпросмотр:<div class="img-preview">Ctrl + V</div>')
		$('#img-url,#img-info').keyup(image_paste_preview)
		$("#std-preview").click(image_paste_preview)
	}
	
	$(cb).dialog({
		title:"Вставка картинки",
		resizable:false,
		width: 630,
		height: 580,
		zIndex: 10,
		buttons: [
			{
				text: "Отменить",
				click: function() {
					$(this).dialog("close");
				}
			},
			{
				text: "Вставить",
				click: function() {
					let s = ""
					if($('#img-info').val()) {
						s = "[scroll=" + $('#img-info').val() + "]";
					}
					let imgURL = $('#img-url').val()
					let index = imgURL.indexOf("i.mcgl.ru")
					if (index > 0 && $("#std-preview input")[0].checked)
						s += "[preview=" + imgURL.substring(index + 10) + "]";
					else
						s += "[img]" + imgURL + "[/img]";
					if($('#img-info').val()) {
						s += "[/scroll]";
					}
					onPaste(s + "|")
					$(this).dialog("close");
				}
			}
		]
	})
}

function on_find_user() {
	if(this.readyState == 4 && this.status == 200) {
		users = document.getElementById("users")
		arr = eval(this.responseText)
		text = ""
		for(var u in arr) {
			text += '<a href="javascript: pasteuser(' + arr[u].id + ', \'' + arr[u].login + '\');">' + arr[u].login + '</a><br>'
		}
		users.innerHTML = text
	}
}

function search_user() {
	l = document.getElementById("login").value
	ajax_get_request("finduser.php?l=" + l, on_find_user)
}

function pasteuser(id, login) {
	onPaste("[user=" + id + "]" + login + "[/user]|")
}

var bkTimerID = 0;
function beginBackupText() {
	if(window.localStorage) {
		var savedText = $("#" + editControl).val();
		if(bkTimerID == 0) {
			bkTimerID = setInterval(function() {
				var text = $("#" + editControl).val();
				if(savedText != text && text != undefined) {
					if(savedText)
						window.localStorage.setItem("msg_text", text);
					savedText = text;
				}
			}, 10000);
		}
	}
}

function backupText() {
	$("#" + editControl).val(window.localStorage.getItem("msg_text"));
}

function edit_text(url_load, url_save, id) {
	p = document.getElementById(id)
	p["bp"] = p.innerHTML
	p["url_save"] = url_save
	p.innerHTML = formatToolsSerialize + '<textarea class="post-editor" id="ed-' + id + '"></textarea><div class="post-editor-cmd"><a href="javascript: edit_text_save(\'' + id + '\');">сохранить</a> | <a href="javascript: edit_text_cancel(\'' + id + '\');">отменить</a></div>'
	setInputControl("ed-" + id)
	r = ajax_get_request(url_load, on_edit_text)
	r['pid'] = id
	bindText();
}

function view_source(url_load, id) {
	p = document.getElementById(id)
	p["bp"] = p.innerHTML
	editControl = "ed-" + id
	p.innerHTML = '<textarea class="post-editor" id="ed-' + id + '"></textarea><div class="post-editor-cmd"><a href="javascript: edit_text_cancel(\'' + id + '\');">отменить</a></div>'
	r = ajax_get_request(url_load, on_edit_text)
	r['pid'] = id
	bindText();
}

function on_delete_block() {
	
}

function delete_comment(url_delete, obj){
	$.get(url_delete,function(){
		$('#comment-' + $(obj).attr('rel') + ' .block').html('Комментарий удален');
	});
}

function restore_comment(url_restore, obj){
	$.get(url_restore,function(){
		$('#comment-' + $(obj).attr('rel') + ' .block').html('Комментарий восстановлен');
	});
}

function show_add_comment(obj){
	if($('#answer-form')){
		$('#answer-form').remove();
	}
		
	var parent = $(obj).parents('.block');
	$('#formatTools').html(formatToolsSerialize);
	var form = $('#form-panel').clone();
	form.attr('id', 'answer-form');
	parent.after(form);
	form.find('form').eq(0).append('<input type="hidden" name="comment_id" value="' + $(obj).attr('rel') + '"/>')
	form.show();
}

function delete_block(url_delete, id) {
	if(confirm("Вы уверены?")) {
		p = document.getElementById(id)
		p.style.display = "none"
		ajax_get_request(url_delete, on_delete_block)
	}
}

function edit_text_cancel(id) {
	p = document.getElementById(id)
	p.innerHTML = p["bp"]
}

function on_edit_text() {
	if(this.readyState == 4 && this.status == 200) {
		p = document.getElementById("ed-" + this.pid)
		p.value = this.responseText
	}
}

function on_edit_text_save(obj) {
	p = document.getElementById(obj.pid)
	p.innerHTML = obj.responseText
}

function edit_text_save(id) {
	editor = document.getElementById("ed-" + id)
	p = document.getElementById(id)
	r = ajax_post_request(p["url_save"], "text=" + encodeURIComponent(editor.value), on_edit_text_save)
	r['pid'] = id
	edit_text_cancel(id)
}

function call_mod(action){
	if($('#callmod').length == 0) {
		cb = document.createElement("div")
		cb.id = "callmod"
		cb.style.display = "none"
		$('body').append(cb)
		$(cb).append('Введите причину вызова модератора:<br/><br/>')
		$(cb).append('<form action="' + action + '" id="callmodform"><input id="callmodreasone" type="text" name="reason" style="width: 470px;"/></form>')
		$(cb).append('<i>(помните о том, что необоснованные вызовы могут стать следствием отключания для Вас этой функции)</i>')
	}
	
	$('#callmod').dialog({
		title:"Вызвать модератора",
		resizable:false,
		modal: true,
		width: 500,
		height: 240,
		zIndex: 10,
		buttons: [
			{
				text: "Отменить",
				click: function() {$(this).dialog("close");}
			},
			{
				text: "Вызвать",
				click: function() {
					if($('#callmodreasone').val() == ''){
						alert('Необходимо заполнить причину вызова');
					}
					else{
						$('#callmodform').submit();
						d.dialog("close");
					}
				}
			}
		]
	})
}

function on_post_vote() {
	if(this.readyState == 4 && this.status == 200) {
		if(this.responseText != "0")
			alert(this.responseText)
	}
}



function post_vote(obj, vote, id) {
	cb = document.getElementById("postvotedlg")
	if(!cb) {
		cb = document.createElement("div")
		cb.id = "postvotedlg"
		cb.style.display = "none"
		$('body').append(cb)
		$(cb).append('Введите комментарий к оценке (обязателен для <img class="finger" src="/img/th-down.png">):<br/><br/>')
		$(cb).append('<input type="text" id="postvote" style="width: 470px;"/>')
		$(cb).append('<i>(помните о том, что комментарии оскорбительного характера или неадекватного содержания могут быть удалены вместе с оценкой по просьбе автора сообщения)</i>')
	}
	
	$("#postvote").val('')
	var d = $(cb).dialog({
		title:"Оценка сообщения пользователя",
		resizable:false,
		modal: true,
		width: 500,
		height: 240,
		zIndex: 10,
		buttons: [
			{
				text: "Отменить",
				click: function() {$(this).dialog("close");}
			},
			{
				text: "Поставить",
				click: function() {
					send();
				}
			}
		]
	})
	$('#postvote').bind('keypress', function(event){
		if(event.keyCode == 13){
			send();
			$(cb).remove();
		}
	});
	
	function send(){
		var s = $("#postvote").val()
		$.post("/topic/" + id + "/vote", { "v": vote, "info": s ? s : ""}, function(data){
			if(data != "0")
				alert(data)
			else {
				obj.parentNode.childNodes[0].src = "/img/th-down-i.png"
				obj.parentNode.childNodes[2].src = "/img/th-up-i.png"
				obj.parentNode.childNodes[1].innerHTML = parseInt(obj.parentNode.childNodes[1].innerHTML) + vote
			}
		})
		d.dialog("close");
	}
//	s = prompt("Введите комментарий к оценке (обязателен для -)", "")
//	if(s != null && (s || vote > 0)) {
//		ajax_get_request("/topic/" + id + "/vote?v=" + vote + "&info=" + encodeURIComponent(s ? s : ""), on_post_vote)
//		obj.parentNode.childNodes[0].src = "/img/th-down-i.png"
//		obj.parentNode.childNodes[2].src = "/img/th-up-i.png"
//		obj.parentNode.childNodes[1].innerHTML = parseInt(obj.parentNode.childNodes[1].innerHTML) + vote
//	}
}

function post_single_vote(obj, url, id) {
	$.get(url, function(data){
		if(data != "0") {
			
		}
		else {
			obj.parentNode.childNodes[1].src = "/img/th-up-i.png"
			obj.parentNode.childNodes[0].innerHTML = parseInt(obj.parentNode.childNodes[0].innerHTML) + 1
		}
	})
}

function show_post(obj, row) {
	obj.parentNode.parentNode.style.display = "none"
	i = 1
	while((obj = document.getElementById("row" + i + "-" + row))) {
		obj.style.display = ""
		i++
	}
}

function change_vk_pass(login, new_pass, uid, hash) {
	$.get("/guilogin/" + uid + "/vkchange", {l:login, p:new_pass, h:hash}, function(data){
		alert(data)
	})
}

function on_join_vk() {
	if(this.readyState == 4 && this.status == 200) {
		alert(this.responseText)
	}
}

function join_vk(uid, hash) {
	ajax_get_request("/securitynew/" + uid + "/vkset?h=" + encodeURIComponent(hash), on_join_vk)
}

function on_topic_favorite() {
	if(this.readyState == 4 && this.status == 200) {
		img = document.getElementById("fav");
		if(this.responseText == "1")
			img.src = "/img/btns/fav.png";
		else
			img.src = "/img/btns/nofav.png";
	}
}

function on_topic_subscribe() {
	if(this.readyState == 4 && this.status == 200) {
		img = document.getElementById("sub");
		if(this.responseText == "1")
			img.src = "/img/btns/fav.png";
		else
			img.src = "/img/btns/nofav.png";
	}
}

function getKey() {
	var i = document.cookie.indexOf("PHPSESSID=");
	var id = document.cookie.substring(i+11, i+16);
	return "?_h=" + id;
}

function topic_favorite(id) {
	ajax_get_request("/topic/" + id + "/favorite" + getKey(), on_topic_favorite)
}

function private_topic_favorite(id) {
	ajax_get_request("/privatetopic/" + id + "/favorite" + getKey(), on_topic_favorite)
}

function htopic_favorite(id) {
	ajax_get_request("/hpost/" + id + "/favorite" + getKey(), on_topic_favorite)
}

function htopic_sub(id) {
	ajax_get_request("/hpost/" + id + "/subscribe" + getKey(), on_topic_subscribe)
}

function vote_screen(sid, v) {
	if(v > 0) {
		obj = document.getElementById("vote-pos-" + sid)
	}
	else {
		obj = document.getElementById("vote-neg-" + sid)
	}
	if(obj.childNodes[0].childNodes.length) {
		obj.childNodes[0].innerHTML = v + parseInt(obj.childNodes[0].innerHTML)
	}
	else
		obj.innerHTML = v + parseInt(obj.innerHTML)
	
	$.get("/screens/" + sid + "/" + (v > 0 ? "pos" : "neg"))

	for(i = 0; i < obj.parentNode.childNodes.length; i++)
		if(obj.parentNode.childNodes[i].href)
			obj.parentNode.childNodes[i].style.display = "none"
}

function show_screen(login, name) {
	document.getElementById("img").src = "/png/" + login + "/" + name + ".jpg"
	$("#img-frame").show("slow")
}

function show_custom_screen(login, id) {
	document.getElementById("img").src = "/png/screens/" + login + "/" + id + ".jpg"
	$("#img-frame").show("slow")
}

function level(exp) {
	start = 100.0
	l = 1
	while(exp > start) {
		l ++
		start *= 1.5
	}
	return l
}

var last_tip = null
function on_object_read() {
	if(this.readyState == 4 && this.status == 200) {
		obj = eval("obj = " + this.responseText)
		if(obj._type == 1){
			last_tip.innerHTML = '\
				<table class="tt-user" width="100%">\n\
					<tr>\n\
						<td colspan="2" class="title">' + obj.login + ' <span class="vote-pos">' + level(obj.make) + '</span>/<span class="vote-neg">' + level(obj.crush) + '</span></td>\n\
					</tr>\n\
					<tr>\n\
						<td class="avatar">' + (obj.avatar == "1" ? '<img src="/img/avatars/' + obj.id + '"/>' : '<img src="/img/prof/' + obj.prof + '.png"/>') + '</td>\n\
						<td>\n\
							<div>Регистрация: ' + obj.register + '</div>\n\
							<div>Активность: ' + obj.last_login + '</div>\n\
							<div>Банов: ' + obj.bans + '/' + obj.bansall + '</div>\n\
							<div>Рейтинг: ' + obj.rating + '</div>\n\
							<div>Сообщений: ' + obj.posts + '</div>\n\
						</td>\n\
					</tr>\n\
				</table>'
		}
		if(obj._type == 2){
			last_tip.innerHTML = '\
					<div>ID: <span class="vip">' + obj.id + '</span> Название: <span class="vip">' + obj.title + '</span></div><br/>\
					<div>' + obj.info + '</div>\
				'
		}
		if(obj._type == 3){
			console.log(obj.pub);
			last_tip.innerHTML = '\
				<table class="tt-user" width="100%">\n\
					<tr>\n\
						<td colspan="2" class="title">' + obj.name + '</td>\n\
					</tr>\n\
					<tr>\n\
						<td class="avatar">' + (obj.icon ? '<img src="/files/teams/' + obj.id + '.png"/>' : '' ) + '</td>\n\
						<td>\n\
							<div>Лидер: ' + obj.leader + '</div>\n\
							<div>Регистрация: ' + obj.time + '</div>\n\
							<div>Сообщений: ' + obj.posts + '</div>\n\
							<div>Тем: ' + obj.topics + '</div>\n\
							<div>Публичность: ' + (obj.public == 1 ? "открытое" : "закрытое") + '</div>\n\
						</td>\n\
					</tr>\n\
				</table>'
		}
		if(obj._type == 10){
			last_tip.innerHTML = '\
				<table class="tt-user" width="100%">\n\
					<tr>\n\
						<td colspan="2" class="title">' + obj.name + ' <span style="color: yellow;">lv' + obj.level + '</span></td>\n\
					</tr>\n\
					<tr>\n\
						<td class="avatar">' + (obj.icon ? '<img src="/clans/' + obj.name + '.png"/>' : '' ) + '</td>\n\
						<td>\n\
							<div>Лидер: ' + obj.leader + '</div>\n\
							<div>Участников: ' + obj.members + '</div>\n\
							<div>Место: ' + obj.place + '</div>\n\
							<div>Войн/союзов: ' + obj.wars + "/" + obj.unions + '</div>\n\
						</td>\n\
					</tr>\n\
				</table>'
		}
		$(last_tip).show("fade");
	}
}

var tip_url = ""
var tip_timer_id = 0

function get_user_info_tip(event) {
	e = window.event ? window.event : event

	hidetip()
	div = document.getElementById("usertip")
	if(!div) {
		div = document.createElement("div")
		div.id = "usertip"
		div.className = "tooltip user"
		document.getElementsByTagName("body")[0].appendChild(div)
	}
	else
		$(div).hide();
	
	div.style.left = (e.clientX + 10) + "px"
	div.style.top = (e.clientY + 10) + "px"
	
	return div
}

function show_user_info_tip(proc) {
	last_tip = div

	tip_timer_id = setTimeout(proc, 500)
}

function showtip(type, obj, event) {
	div = get_user_info_tip(event)
	
	tip_url = "/object/" + obj + "/" + type

	show_user_info_tip(_show_tooltip)
}

function _show_tooltip() {
	ajax_get_request(tip_url, on_object_read)
}

function hidetip() {
	clearTimeout(tip_timer_id)
	tip_timer_id = 0
	if(last_tip != null) {
		$(last_tip).hide("fade");
		last_tip = null
	}
}

function showusertip(obj, event) {
	div = get_user_info_tip(event)
	
	div.innerHTML = obj.childNodes[1].innerHTML
	
	show_user_info_tip(_show_user_tooltip)
}

function _show_user_tooltip() {
	
	$(last_tip).show("fade");
}

function on_code_change(obj) {
	
}

function change_code() {
	code = prompt("Введите кодовое слово")
	ajax_post_request("?i=24", "code=" + encodeURIComponent(code), on_code_change)
}

function on_end_tag_edit(obj) {

}

function edit_tag(update, obj) {
	var state = obj.getAttribute("enabled");
	obj.setAttribute("enabled", state == 'true' ? 'false' : 'true');
	ajax_get_request(update, on_end_tag_edit);
}

function getElementById(parentd, id) {
	var i = 0
	for(i = 0; i < parentd.childNodes.length; i++) {
		if(parentd.childNodes[i].id == id)
			return parentd.childNodes[i]
		obj = getElementById(parentd.childNodes[i], id)
		if(obj)
			return obj;
	}
	return null
}

function end_title_edit(obj, event) {
	e = window.event ? window.event : event
	if(e.keyCode == 13 || e.keyCode == 27) {
		parentd = obj.parentNode.parentNode
		div = obj.parentNode
		parentd.innerHTML = div.oldBody
		if(e.keyCode == 13) {
			title = getElementById(parentd, "edit-title")
			title.innerHTML = obj.value;
			ajax_post_request(div.update, "title=" + encodeURIComponent(obj.value), on_end_tag_edit)
		}
	}
}

function edit_title(update, obj, pattern) {
	if(!pattern)
		pattern = '(не указан)';
	//alert(parent)
	parentd = obj.parentNode.parentNode
	title = getElementById(obj.parentNode, "edit-title")
	//obj.parentNode.style.display = "none"
	div  = document.createElement("div")
	div['oldBody'] = obj.parentNode.parentNode.innerHTML
	div['update'] = update
	div.innerHTML = '<input type="edit" value=\'' + (title.innerHTML ==  pattern? '' : title.innerHTML) + '\' onkeydown="end_title_edit(this, event)"/>'
	parentd.innerHTML = ''
	parentd.appendChild(div)
	div.childNodes[0].focus()
}

function on_change_chbox(obj) {

}

function change_chbox(update, value) {
	ajax_post_request(update, "v=" + (value ? 1 : 0), on_change_chbox)
}

function change_listbox(update, value) {
	ajax_post_request(update, "v=" + value, on_change_chbox)
}

function on_change_lbox(obj) {

}

function change_lbox(update, value) {
	ajax_post_request(update, "v=" + value, on_change_lbox)
}

function show_info(num) {
	for(i = 1; i <= 40; i++) {
		obj = document.getElementById("m-" + i)
		if(obj) obj.className = (i == num) ? "rbtn-active" : "rbtn"
	}
}

function userliFormat (row, i, num) {
	var result = '<span class="' + row[1] + '" id="' + row[2] + '">' + row[0] + '</span>';
	return result;
}

var selectUserId = 0

function userselectItem(li) {
	selectUserId = li.childNodes[0].id
}

function attach_user_auto(id) {
	$(document).ready(function(){
		$(id).autocomplete("/object/0/4", {
		delay:400,
		minChars:3,
		matchSubset:0,
		autoFill:false,
		matchContains:0,
		cacheLength:0,
		selectFirst:true,
		formatItem:userliFormat,
		maxItemsToShow:10,
		selectOnly:true,
		onItemSelect:userselectItem
	  });
	});
}

function pick_item(callback) {
	
}

function add_to_chat(text) {
	document.getElementById("chat").innerHTML += text
	document.getElementById("chat").scrollTop = 32768
}

function on_chat_request() {
	if(this.readyState == 4 && this.status == 200) {
		 add_to_chat('<div><span class="girls">Yana</span>: ' + this.responseText + '</div>')
	}
}

function chat_send_msg(event) {
	e = window.event ? window.event : event
	if(e.keyCode == 13) {
		msg = document.getElementById("chat-msg")
		ajax_post_request("/botconsole/0/yana", "say=" + encodeURIComponent(msg.value), on_chat_request)
		add_to_chat('<div><span class="vip">Player</span>: ' + msg.value + '</div>')
		msg.value = ""
	}
}

function normalize(v) {
	while(v < -200) v+=400
	while(v > 200) v-=400
	return v
}

function show_map(obj, event, x, z, _server, _world, _dimension) {
	let div = get_user_info_tip(event)
	div.innerHTML = ''
	
	lock = true;
//	$(obj).bind('mouseenter', function(){
		tiles = []
		let divm = document.createElement('div');
		$(divm).width(400)
		$(divm).height(400)
		$(divm).attr('id', 'map');
//		$(divm).addClass('maplink');
		$(div).append(divm);

		//Важно только это
		worldDim = _dimension;
		server = _server;
		world = _world;
		zonesTiles = true;
		createMap('#map', false);
		setCenter(x, z, true);
//	});

//	if(dimension == 0)
//		map = "day"
//	else
//		map = dimension
//	
//	s = '<div class="map"><table class="chunk" style="left: ' + (-450 + normalize(z)) + 'px; top: ' + (-450 - normalize(x)) + 'px;" cellspacing=0 cellpadding=0>'
//	for(i = x - 400; i <= x+400; i+= 400) {
//		s += '<tr>'
//		for(j = z + 400; j >= z-400; j-= 400) {
//			mx = Math.round(i/400)*400;
//			mz = Math.round(j/400)*400;
//			left = (z - j) - 50
//			stop = (i - x) - 50
//			url = 'http://mc-map.mcgl.ru/maps/' + server + '/map-' + map + '/map_' + mx + '_' + mz + '.png'
//			s += '<td>'
//			s += '<div style="width: 400px; height: 400px; background-image: url(\'' + url + '\');" />'
//			//s += '<img src="' + url + '" />'
//			s += '</td>'
//		}
//		s += '</tr>'
//	}
//	s += '</table><img style="display: relative; " src="http://icons.mcgl.ru/img/6/2215_arrow_down_blue.png" /></div>'
//	div.innerHTML = s
	
	show_user_info_tip(_show_user_tooltip)
}

var craft_matrix = null

function show_craft_matrix() {
	cb = document.getElementById("craftbuilder")
	if(!cb) {
		cb = document.createElement("div")
		cb.id = "craftbuilder"
		//cb.className = "tooltip"
		document.getElementsByTagName("body")[0].appendChild(cb)
	}
	
	craft_matrix = {}
	
	cb.innerHTML = '<table class="craft-table"><tr><td><table><tr><td class="craft-slot"><div class="items-bg-32" onclick="select_block(this);" id="s1"></div></td><td class="craft-slot"><div class="items-bg-32" onclick="select_block(this);" id="s2"></div></td><td class="craft-slot"><div class="items-bg-32" onclick="select_block(this);" id="s3"></div></td></tr><tr><td class="craft-slot"><div class="items-bg-32" onclick="select_block(this);" id="s4"></div></td><td class="craft-slot"><div class="items-bg-32" onclick="select_block(this);" id="s5"></div></td><td class="craft-slot"><div class="items-bg-32" onclick="select_block(this);" id="s6"></div></td></tr><tr><td class="craft-slot"><div class="items-bg-32" onclick="select_block(this);" id="s7"></div></td><td class="craft-slot"><div class="items-bg-32" onclick="select_block(this);" id="s8"></div></td><td class="craft-slot"><div class="items-bg-32" onclick="select_block(this);" id="s9"></div></td></tr></table></td><td style="padding: 0 10px 0 10px;"><img src="/img/craft-arrow.png"/></td><td><div class="craft-slot"><div class="items-bg-32" onclick="select_block(this);" id="r"></div></div></td></tr></table>'
	
	$(cb).dialog({
		title: "Матрица крафта",
		buttons: [
			{
				text: "Закрыть",
				click: function() {$(this).dialog("close");}
			},
			{
				text: "Вставить",
				click: function() {insert_craft();$(this).dialog("close");}
			}
		]
	})
}

function close_craft() {
	$("#craftbuilder").hide()
}

function insert_craft() {
	res = ""
	for(i = 1; i <= 9; i++)
		if(craft_matrix["s" + i])
			res += " s" + i + "=" + craft_matrix["s" + i]
	if(craft_matrix['r'])
		res += " r=" + craft_matrix['r']
	onPaste("|[craft" + res + "]")
	close_craft()
}

var _block_slot = null

function on_block_select(node, id, data) {
	craft_matrix[_block_slot.id] = id
	if(data)
		craft_matrix[_block_slot.id] += "|" + data
	$(_block_slot).html($(node).html())
}

function select_block(obj) {
	if($(obj).html())
		$(obj).html("")
	else {
		_block_slot = obj
		show_item_select_dialog(on_block_select)
	}
}

function on_items_request() {
	if(this.readyState == 4 && this.status == 200) {
		arr = eval(this.responseText)
		list = ""
		for(i in arr) {
			list += '<div class="item" onclick="select_tag(this, ' + arr[i].id + ')">' + arr[i].name + '</div>'
		}
		
		$("#tags-list").html(list)
	}
}

function make_item(item) {
	var ico = '';
	if(item.id == 0)
		ico = '';
	else if(item.id <= 255)
		ico = '<div class="blocks-32" style="background-position: -' + (item.x*32) + 'px -' + (item.y*32) + 'px"></div>';
	else if(item.id >= 1400 && item.id < 1500 || item.id == 793)
		ico = '<div class="wings-bg-32" style="background-position: -' + (item.x*32) + 'px -' + (item.y*32) + 'px"></div>';
	else if(item.id >= 657 && item.id < 800 || item.id >= 1000 && item.id <= 1120 || item.id == 3256 || item.id == 3257)
		ico = '<div class="items-dmh-bg-32" style="background-position: -' + (item.x*32) + 'px -' + (item.y*32) + 'px"></div>'
	else if(item.id >= 800 && item.id < 1000 || item.id >= 1500 && item.id < 1600)
		ico = '<div class="access-bg-32" style="background-position: -' + (item.x*32) + 'px -' + (item.y*32) + 'px"></div>';
	else if(item.id >= 1300 && item.id < 1400)
		ico = '<div class="shields-bg" style="background-position: -' + (item.x*32) + 'px -' + (item.y*32) + 'px"></div>';
	else if(item.id == 1287)
		ico = '<div class="quest-items" style="background-position: -' + (item.x*32) + 'px -' + (item.yY*32) + 'px"></div>';
	else if(item.id > 1180 && item.id < 1299 || item.id >= 2000 && item.id < 2061)
		ico = '<div class="items3" style="background-position: -' + (item.x*32) + 'px -' + (item.y*32) + 'px"></div>';
	else if(item.id >= 2061 && item.id <= 2200)
		ico = '<div class="items4" style="background-position: -' + (item.x*32) + 'px -' + (item.y*32) + 'px"></div>';
	else
		ico = '<div class="items-bg-32" style="background-position: -' + (item.x*32) + 'px -' + (item.y*32) + 'px"></div>';

	return ico
}

function select_item(obj, id, data) {
	$("#itemselect").dialog("close")
	hidetip()
	_item_proc(obj, id, data)
}

function on_tags_request() {
	if(this.readyState == 4 && this.status == 200) {
		let arr = eval(this.responseText)
		let list = ""
		for(let i in arr) {
			list += '<div class="item" onmouseover="showtip(\'2?d=' + arr[i].data + '\', \'' + arr[i].id + '\', event)" onmouseout="hidetip()" onclick="select_item(this, ' + arr[i].id + ', ' + arr[i].data + ')">' + make_item(arr[i]) + '</div>'
		}
		
		$("#items-list").html(list)
	}
}

var _old_item_select = null
function select_tag(obj, tag) {
	if(_old_item_select) _old_item_select.className = "item"
	obj.className += " select"
	_old_item_select = obj
	ajax_get_request("/items/" + tag + "/list", on_tags_request)
}

function select_tag_anhor(obj, tag) {
	if(_old_item_select) _old_item_select.className = "item"
	obj.className += " select"
	_old_item_select = obj
	ajax_get_request("/items/" + tag + "/list", on_tags_request)
	window.location = "/items/?old#" + tag
}

var _item_proc = null

function show_item_select_dialog(proc) {
	_item_proc = proc
	
	cb = document.getElementById("itemselect")
	if(!cb) {
		cb = document.createElement("div")
		cb.id = "itemselect"
//		cb.className = "tooltip"
		cb.style.display = "none"
		document.getElementsByTagName("body")[0].appendChild(cb)
	}
	
//	cb.style.left = "200px"
//	cb.style.top = "200px"
	
	cb.innerHTML = '<div id="tags-list">...load...</div><div id="items-list"></div>'
	
	if(!$("tags-list").html())
		ajax_get_request("/items/0/tags", on_items_request)
	
	$(cb).dialog({
		title:"Выбор предмета или блока",
		resizable:false,
		width: 600,
		height: 460,
		zIndex: 10,
		buttons: [
			{
				text: "Закрыть",
				click: function() {$(this).dialog("close");}
			}
		]
	})
}

function on_item_select(node, id, data) {
	if(data)
		onPaste("[item=" + id + ":" + data + "]|")
	else
		onPaste("[item=" + id + "]|")
}


function show_smiles_dialog() {
	cb = document.getElementById("smiliesdlg")
	if(!cb) {
		cb = document.createElement("div")
		cb.id = "smiliesdlg"
		cb.style.display = "none"
		$('body').append(cb)
		for(i = 1; i <= 11; i++) {
			$(cb).append('<img class="smile" title="[img]/img/ns/' + i + '.gif[/img]" src="/img/ns/' + i + '.gif" onclick=\'onPaste(this.title + "|"); $("#smiliesdlg").dialog("close");\'/>')
		}
	}
	
	$(cb).dialog({
		title:"Вставка анимационного смайла",
		resizable:false,
		width: 400,
		height: 220,
		zIndex: 10,
		buttons: [
			{
				text: "Закрыть",
				click: function() {$(this).dialog("close");}
			}
		]
	})
}

function show_item_box() {
	show_item_select_dialog(on_item_select)
}

function register() {
	window.open("regform.html", "register", "menubar=no,location=no,width=480,height=410")
}

function open_chat() {
	window.location = "/smschat/";
}

function show_menu(obj) {
	obj.style.display = 'block'
	//if(obj.style.display == "none")
	//	$(obj).show("fade")
}

function hide_menu(obj) {
	obj.style.display = 'none'
	//$(obj).hide("fade")
}

function change_sizes() {
	html = document.getElementsByTagName("html")[0]
	var dif = 355 + $("#smschat").next().find('.login-panel').width() + $("#smschat").next().find('.popup').width(); 
	$("#smschat").width($("#smschat").parent().width() - dif);
}

function sendSmsKey(btn, id) {
	$.get('/smskey/' + id + '/get', function(data){
		if(data == "1")
			alert("Исчерпан лимит на количество SMS в день. Попробуйте позже!")
		else if(data != "0") {
			$("#smskey" + id).val(data)
			$("#smssession" + id).html("(сессия №" + data + ")")
			alert("Код успешно отправлен на ваш номер телефона, дождитесь его получения и не обновляйте страницу")
		}
		else
			alert("Отправить SMS на номер вашего телефона не удалось!")
	});

	$(btn).hide()
	
	return false;
}

function sendMailKey(btn) {
	$.get('/mailkey/0/get', function(data){
		if(data == "1")
			alert("Исчерпан лимит на количество ключей в день. Попробуйте позже!")
		else if(data != "0") {
			alert("Код успешно отправлен на ваш e-mail, дождитесь его получения и не обновляйте страницу")
		}
		else
			alert("Отправить e-mail не удалось!")
	});

	$(btn).hide()
	
	return false;
}

function get_fee(obj){
	$(obj).parent().parent().find('.input').show();
	$(obj).parent().parent().find('.input .fee').focus();
	return false;
}

function hide_lot(obj){
	$(obj).parent().hide();
}

function send_fee(obj){
	var input = $(obj).prev();
	if(Number(input.attr('fee')) + Number(input.attr('step')) > input.val()){
		alert("Ставка должна быть не меньше текущей плюс минимальный шаг");
		return false;
	}
	
	return true;
}

function check_accept_buy(checkbox){
	if($(checkbox).attr("checked") == "checked"){
		$(checkbox).parent().next().removeAttr('disabled', '');
	}
	else{
		$(checkbox).parent().next().attr('disabled', 'disabled');
	}
}

function auction_key_helper(event, obj){
	event = event ? event : window.event;
	if(event.keyCode == 27 || event.which == 27){
		$(obj).parent().hide();
	}
	else if(event.keyCode == 13 || event.which == 13){
		$(obj).next().click();
	}
}

function auction_add_favorite(obj){
	$.get($(obj).attr('href'), function(data){
		if(data == 1){
			$(obj).find('img').attr('src', 'http://icons.mcgl.ru/img/1/5637_14.png');
		}
		else{
			$(obj).find('img').attr('src', 'http://icons.mcgl.ru/img/1/5459_star.png');
		}
	});
}

function deleteConfirm(text) {
	text = text ? text : "Вы уверены?";
	return confirm(text);
}

var activeWindow = true;
var lockGetter = false;
$(window).bind('focus', function(){
	activeWindow = true;
});
$(window).bind('blur', function(){
	activeWindow = false;
});

function runTopicReadListUpdater(id) {
	setInterval(function() {
		if(activeWindow && !lockGetter){
			$.get("/topic/" + id + "/ulist", function(data){
				$("#topic-read-list").html("Этот топик читают: " + data)
			});
			if(l = document.getElementById("last-post"))
				$.get("/topic/" + id + "/lpost?p=" + l.innerHTML, function(data){
					if(data) {
						l = $("#last-post")
						old = document.getElementById("last-post")
						l.html(data)
						l.fadeIn()
						old.id = ""
					}
				});
		}
	}, 15000);
}

function sendForm(addr, form) {
	
	$("#form-panel").hide();
	$("#tools").show();

	/*inp = $("#form-panel textarea")
	obj = {}
	obj[inp[0].name] = inp.val()
	obj.form = "";*/
	lockGetter = true;
	//$.post(addr ? addr : window.location, obj, function(data){
	$.post(addr ? addr : window.location, $("#form-panel form").serialize(), function(data){
		if(data.indexOf("Введите") > -1){
			var l = $("#form-panel");
			if($('#error').length == 0)
				l.before("<div id='error' style='display:none;'>" + data + "</div>");
			else
				$('#error').html(data);
			$('#error').fadeIn();
		}
		else{
			l = $("#last-post")
			if(l.length == 0){
				window.location = $('.navigate .pages a:last').attr('href');
			}
			else{
				old = document.getElementById("last-post")
				l.html(data)
				l.fadeIn()
				$("#form-panel textarea").val("")
				$('#error').html('');
				$('#form-panel img').attr('src', '/captcha/0/get?' + Math.random());
				$('#form-panel input[name=captcha]').val('');
				old.id = ""
			}
		}
		lockGetter = false;
	});

	return false
}

function field_user_select(id, login) {
	$("#" + id).val(login)
}

function tag_user_select(id, login) {
	pasteuser(selectUserId, login)
}

function user_select_search() {
	$("#user-select-search").show()
	$("#user-select-list").hide()
}

function select_user_item(id, login) {
	selectUserId = id
	$("#ui-user-select").val(login)
	$("#user-select").dialog("option", "buttons")[0].click()
}

function user_select_follow(type) {
	$("#user-select-list").html("...загрузка списка...")
	$("#user-select-search").hide()
	$("#user-select-list").show()
	$.get("/object/0/" + type, function(data){
		eval('arr = ' + data)
		list = "<div class=\"upanel\">"
		for(i in arr.items) {
			list += '<div class="item ' + arr.items[i].group + '" onclick="select_user_item(' + arr.items[i].id + ', \'' + arr.items[i].login + '\')">' + arr.items[i].login + '</div>'
		}
		list += "</div>"
		$("#user-select-list").html(list)
	});
}

function onuserselect(id, proc) {
	$("#user-select").dialog({
		title:"Выбор пользователя",
		modal:true,
		resizable:false,
		width: 400,
		buttons: [
			{
				text: "Ok",
				click: function() {
					$.get('/object/0/9?q='+$("#ui-user-select").val(), function(data){
						var u = eval(data)[0];
						selectUserId = u.id;
						if(proc == field_user_select)
							proc(id, u.login);
						else
							proc(u.id, u.login); 
						$("#user-select").dialog("close");
					})
				}
			}
		]
	})
	return false
}

function onitemselect(id, proc) {
	show_item_select_dialog(function(obj, item_id, item_data){
		$("#" + id).val(item_id)
	})
	return false
}

function tgcon(ids) {
	$('div#con-' + ids).slideToggle()
}

function del_screen(obj, id) {
	if(confirm("Точно удалить скриншот?")){
		$(obj.parentNode).hide();
		$.get("/screens/" + id + "/delete" + getKey(), function(data) {});
	}
}


function show_preview(obj, url) {
	if(!document.getElementById("img-preview-bk")) {
		w = $('body').width()
		h = $(window).height()
		$('body').append('<div class="preview" id="img-preview-bk" style="width: ' + w + 'px; height: ' + h + 'px;"></div>');
		$('body').append('<div class="preview-images" id="preview-images" style="width: ' + w + 'px; height: ' + h + 'px;"></div>');
	}
	cb = document.createElement("img")
	if(url)
		cb.src = url;
	else
		cb.src = obj.src.substr(0, obj.src.length-2);
	cb.style.display = "none"
	cb.style.maxWidth = (w - 200) + "px"
	cb.style.maxHeight = (h - 200) + "px"
	cb.className = "preview-image"
	$(cb).load(function(){
		if(h - 200 > $(this).height())
			$(this).css('top', Math.round((h - $(this).height())/2))
		else
			$(this).css('top', 100)
	})
	$('#preview-images').append(cb)

	$("#preview-images, #img-preview, .preview-image").click(function(){
		$("#img-preview-bk, #preview-images").hide();
		$("#preview-images").html('')
	})
	
	$("#img-preview-bk").show()
	$("#preview-images").show()
	$(".preview-image").fadeIn();
}

var cube, radious = 1600, theta = 45, phi = 60;
var face = [
	['0x2f200d', '0x2b1e0d', '0x2f1f0f', '0x281c0b', '0x241808', '0x261a0a', '0x2b1e0d', '0x2a1d0d'],
	['0x2b1e0d', '0x2b1e0d', '0x2b1e0d', '0x332411', '0x422a12', '0x3f2a15', '0x2c1e0e', '0x281c0b'],
	['0x2b1e0d', '0xb6896c', '0xbd8e72', '0xc69680', '0xbd8b72', '0xbd8e74', '0xac765a', '0x342512'],
	['0xaa7d66', '0xb4846d', '0xaa7d66', '0xad806d', '0x9c725c', '0xbb8972', '0x9c694c', '0x9c694c'],
	['0xb4846d', '0xffffff', '0x523d89', '0xb57b67', '0xbb8972', '0x523d89', '0xffffff', '0xb4846d'],
	['0x9c6346', '0x965f40', '0xb78272', '0x6a4030', '0x6a4030', '0xbe886c', '0xa26a47', '0x805334'],
	['0x905e43', '0x965f40', '0x774235', '0x774235', '0x774235', '0x774235', '0x8f5e3e', '0x815339'],
	['0x6f452c', '0x6d432a', '0x815339', '0x815339', '0x7a4e33', '0x83553b', '0x83553b', '0x7a4e33']
];
function init_voxel_scene(scene_id, url, head) {

	container = document.getElementById(scene_id);

	var camera = new THREE.Camera( 40, 1, 1, 10000 );
	camera.position.x = radious * Math.sin( theta * Math.PI / 360 ) * Math.cos( phi * Math.PI / 360 );
	camera.position.y = radious * Math.sin( phi * Math.PI / 360 );
	camera.position.z = radious * Math.cos( theta * Math.PI / 360 ) * Math.cos( phi * Math.PI / 360 );
	camera.target.position.y = 300;
	camera.target.position.x = 50*8;
	camera.target.position.z = 50*8;

	var scene = new THREE.Scene();
	scene.addVoxelOffset = function(x,y,z,color,offset) {
		var voxel = new THREE.Mesh( cube, new THREE.MeshColorFillMaterial(color));
		voxel.position.x = x*50;
		voxel.position.y = y*50 + offset;
		voxel.position.z = z*50;
		voxel.overdraw = true;
		scene.addObject( voxel );
	}
	scene.addVoxel = function(x,y,z,color) {
		this.addVoxelOffset(x,y,z,color,0)
	}

	cube = new Cube( 50, 50, 50 );

	// Lights

	var ambientLight = new THREE.AmbientLight( 0x404040 );
	scene.addLight( ambientLight );

	var directionalLight = new THREE.DirectionalLight( 0xffffff );
	directionalLight.position.x = 1;
	directionalLight.position.y = 1;
	directionalLight.position.z = 0.75;
	directionalLight.position.normalize();
	scene.addLight( directionalLight );

	var directionalLight = new THREE.DirectionalLight( 0x808080 );
	directionalLight.position.x = - 1;
	directionalLight.position.y = 1;
	directionalLight.position.z = - 0.75;
	directionalLight.position.normalize();
	scene.addLight( directionalLight );

	var renderer = new THREE.CanvasRenderer();
	renderer.setSize( 200, 200 );

	container.appendChild(renderer.domElement);
	
	if(head){
		for(z = 0; z < 8; z++) {
			for(y = 0; y < 8; y++) {
				for(x = 0; x < 8; x++) {
					if(x == 0 || y == 0 || z == 0 || x == 7 || y == 7 || z == 7) {
						var c = 0;
						if(z == 0)
							c = face[7 - y][x];
						else if(y == 7 || y == 0)
							c = face[7 - y][x];
						else if(x == 0 || x == 7)
							c = face[7 - y][x];
						scene.addVoxelOffset(x + 4, y, z + 4, c, -1)
					}
				}
			}
		}
	}
	var model = new BinFileReader(url);
	for(z = 0; z < 16; z++) {
		for(y = 0; y < 16; y++) {
			for(x = 0; x < 16; x++) {
				model.readNumber()
				r = model.readNumber()
				g = model.readNumber()
				b = model.readNumber()
				if(r || g || b) {
					scene.addVoxel(x, y, z, create_color(r, g, b))
				}
			}
		}
	}

	setInterval(function(){
		if($("#" + scene_id).is(":visible")) {
			theta = 1 + theta;

			camera.position.x = radious * Math.sin( theta * Math.PI / 360 ) * Math.cos( phi * Math.PI / 360 );
			camera.position.y = radious * Math.sin( phi * Math.PI / 360 );
			camera.position.z = radious * Math.cos( theta * Math.PI / 360 ) * Math.cos( phi * Math.PI / 360 );
			camera.updateMatrix();

			renderer.render( scene, camera );
		}
	}, 1000/50);
}

function create_color(r,g,b) {
	var rint = r + (g << 8) + (b << 16);
	//return ('0x' + r.toString(16) + g.toString(16) + b.toString(16));
	return ('0x' + rint.toString(16)).replace(/^#0([0-9a-f]{6})$/i, '#$1');
}

function setFilename(obj){
	var val = $(obj).val();
	var s = val.lastIndexOf('\\') + 1;
	if(val == '')
		val = "Выберите файл";
	$(obj).next().val(val.substring(s));
}

function show_twits(obj){
	if($('#twits').length == 0)
		$('body').append('<div id="twits" class="twits"></div>')
	
	$('#twits').html('<img src="/img/ajax-loader.gif"/>');
	$.get('/lastevents/0/newslist', function(data){
		$(obj).find('.counter').remove();
		$('#twits').html(data);
	})
	$('#twits').dialog({
		title:"Лента событий",
		resizable:false,
		modal: true,
		width: 505,
		height: 300,
		zIndex: 10,
		buttons: [
			{
				text: "Закрыть",
				click: function() {$(this).dialog("close");}
			},
			{
				text: "Вся лента",
				click: function() { window.location = "/lastevents/"}
			},
		]
	});
}

function showPreview(obj){
	if($('#preview').length == 0)
		$('body').append('<div id="preview" class="preview-dialog"></div>');
	$('#preview').html('<img src="/img/ajax-loader.gif"/>');
	$('#preview').dialog({
		title:"Предпросмотр сообщения",
		resizable:false,
		modal: true,
		width: 800,
		height: 500,
		zIndex: 10,
		buttons: [
			{
				text: "Закрыть",
				click: function() {$(this).dialog("close");}
			},
		]
	});
	
	var val = "";
	
	var area = $(obj).nextAll('textarea');
	if(area.length === 0)
		area = $(obj).parent().nextAll('textarea');
	
	val = area.length === 0 ? $('#message').val() : area.val();
	
	$.post('/main/0/preview', {'text' : val}, function(data){
		$('#preview').html(data);
	});
}

/*
 * Используется для 
 */
function saveState(obj){
	setCookie($(obj).attr('name'), $(obj).attr('checked') == 'checked' ? 'yes' : 'no');
	updatePage();
}

function loadState(){
	$('.server-item input[type=checkbox]').each(function(){
		if (getCookie($(this).attr('name')) == 'yes')
			$(this).attr('checked', 'checked');
	});
}

function updatePage(){
	var servers = '';
	$('.server-item input[type=checkbox]').each(function(){
		if($(this).attr('checked') == 'checked')
			servers += $(this).val() + '|';
	});
	$.get('/hchat/0/list?servers=' + servers, function(data){
		var words = $('#chat-filter').val().split(' '); 
		$('#hchat').html(data);
		$('#hchat .text-row').each(function(){
			var text = $(this).html();
			for(var i=0; i<words.length; i++){
				var word = words[i];
				if(word) {
					var old = text
					text = text.replace(new RegExp('(' + word + ')', 'g'), '<span class="mods">$1</span>');
					if(old != text) {
						var audio = document.getElementById("alert");
						//audio.volume = 0.2;
						//audio.play();
					}
				}
			}
			$(this).html(text);
			$(this).next().bind('mouseenter', function(){
				$('#notrefresh').attr('checked','checked'); 
			});
			$(this).next().bind('mouseleave', function(){
				$('#notrefresh').removeAttr('checked'); 
			});
		});
		
	});
}
var rules = '<select name="short"><optgroup label="1.1. Общение в публичных чатах."><option value="1.1.1.">1.1.1. Запрещены сообщения, не несущие смысловой нагрузки за короткий промежуток времени (флуд).</option><option value="1.1.2.">1.1.2. Запрещен мат, завуалированый мат, оскорбления в игровом чате.</option><option value="1.1.3.">1.1.3. Запрещено оскорблять родителей и других членов семей пользователей.</option><option value="1.1.4.">1.1.4. Запрещен мат и оскорбления с использованием любых технических средств игры (ники, таблички, названия зон и т.д.).</option><option value="1.1.5.">1.1.5. Запрещено чрезмерное увлечение общением с ботами (ботофилия).</option><option value="1.1.6.">1.1.6. Запрещена реклама любых товаров и услуг, кроме внутриигровых.</option><option value="1.1.7.">1.1.7. Запрещено распространение личных сведений пользователей без их согласия.</option></optgroup><optgroup label="1.2. Постройки."><option value="1.2.1.">1.2.1. Запрещено что-либо разрушать и/или строить на спауне и в его окрестностях, что так или иначе мешает игрокам (наносит урон, мешает свободному передвижению и другое), исключением могут быть строители спаунов.</option><option value="1.2.2.">1.2.2. Запрещено строить, добавлять изображения или любыми другими техническими средствами размещать в игровом мире материалы, нарушающие законодательство РФ.</option></optgroup><optgroup label="1.3. Ошибки и игровая механика."><option value="1.3.1.">1.3.1. Запрещено использование и/или распространение сведений и программного обеспечения для обхода игровой механики, неправомерного доступа к аккаунтам, взлома игры и любых других возможностей, направленных на получение игрового преимущества.</option><option value="1.3.2.">1.3.2. Запрещено использование любых игровых ошибок.</option></optgroup><optgroup label="1.4. Игровые ценности."><option value="1.4.1.">1.4.1. Запрещена продажа (в том числе и упоминания о продаже любыми доступными в игре средствами) игровых ресурсов, gold и любых других видов ценностей за реальные деньги.</option><option value="1.4.2.">1.4.2. Запрещена продажа аккаунтов в обход аукциона.</option></optgroup><optgroup label="1.5. Попрошайничество."><option value="1.5.1.">1.5.1. Запрещено попрошайничество, направленное как на отдельного пользователя, так и на всех пользователей в целом, просьбы перевести Gold, WebMoney, Яндекс-деньги и любые другие виды электронных или игровых валют.</option></optgroup><optgroup label="1.6. Администрация и сервер."><option value="1.6.1.">1.6.1. Категорически запрещены оскорбления в адрес администрации и сервера.</option><option value="1.6.2.">1.6.2. Запрещается осуждать действия администрации в игровом чате, задавать одни и те же вопросы, просить подарить/продать/купить какие-либо игровые ценности или препятствовать работе администрации любыми другими способами.</option><option value="1.6.3.">1.6.3. Запрещено действовать от имени администрации сервера, выдавать себя за администрацию, совершать любые другие действия, направленные на введение пользователей в заблуждение относительно действий администрации.</option><option value="1.6.4.">1.6.4. Запрещена реклама других серверов похожей или смежной направленности.</option><option value="1.6.5.">1.6.5. Запрещено преднамеренное нарушение работы сервера и связанных с ним сервисов путем использования ошибок, уязвимостей, стороннего ПО и любым другим способом.</option></optgroup><optgroup label="1.7. Дополнительные правила для Build."><option value="1.7.1.">1.7.1. Запрещено убийство игроков и порча чужих построек.</option></optgroup></select>'; 
function sendBanForm(id, message){
	if($('#ban-form').length == 0)
		$('body').append('<div id="ban-form" class="mute-form"><form action="/banrequest/"><input name="form" type="hidden"/><div class="title">Логин игрока</div><div><input name="user" type="text" id="user-name" value=""/></div><div class="title">Пункт правил</div><div>' +
				rules +
				'</div><div class="title">Описание</div><div><textarea name="full">' + message + '</textarea></div></form></div>')
	$('#user-name').val(id);
	
	
	$('#ban-form').dialog({
		title:"Отправить заявку на бан",
		resizable:false,
		modal: true,
		width: 505,
		height: 300,
		zIndex: 10,
		buttons: [
			{
				text: "Отменить",
				click: function() {$(this).dialog("close");}
			},
			{
				text: "Принять",
				click: function() {
					var form = $('#ban-form form').eq(0);
					$.post(form.attr('action'), form.serialize(), function(){
						
					});
					$(this).dialog("close");
				}
			}
		]
	});
}

function sendMuteForm(id, message){
	$('#mute-form').remove();
	if($('#mute-form').length == 0)
		$('body').append('<div id="mute-form" class="mute-form"><form action="/hchat/"><input name="form" type="hidden"/><div class="title">Логин игрока</div><div><input name="user" type="text" id="mute-user-name" value="' + id + '"/></div><div class="title">Пункт правил</div><div>' + 
				rules + 
				'</div><div class="title">Сообщение</div><div><input type="text" name="message" value="' + message + '"/></div></form></div>')
	
	$('#mute-form').dialog({
		title:"Отправить заявку на мут",
		resizable:false,
		modal: true,
		width: 505,
		height: 300,
		zIndex: 10,
		buttons: [
			{
				text: "Отменить",
				click: function() {$(this).dialog("close");}
			},
			{
				text: "Принять",
				click: function() {
					var form = $('#mute-form form').eq(0);
					$.post(form.attr('action'), form.serialize(), function(data){
						if(data == "false")
							alert("Пользователь уже получил мут");
					});
					$(this).dialog("close");
				}
			}
		]
	});
}

function setCookie(name, value, expires, path, domain, secure) {
    if (!name || !value) return false;
    var str = name + '=' + encodeURIComponent(value);
    if (expires) {
		str += '; expires=' + expires.toGMTString();
	}
	else{
		str += '; expires=Mon, 01-Jan-2051 00:00:00 GMT';
	}
    if (path)    str += '; path=' + path;
    if (domain)  str += '; domain=' + domain;
    if (secure)  str += '; secure';
    document.cookie = str;
    return true;
}

function getCookie(name) {
	var pattern = "(?:; )?" + name + "=([^;]*);?";
    var regexp  = new RegExp(pattern);
    if (regexp.test(document.cookie))
    	return decodeURIComponent(RegExp["$1"]);
    return false;
}

function send_prize(obj){
	var parent = $(obj).parents('tr').eq(0);
	var user = parent.find('input[name=user]').val();
	var server = parent.find('select[name=server]').val();
	
	if(user != '' && server != ''){
		$.post($(obj).attr('href'), {user : user, server : server}, function(data){
			if(data == 1){
				window.location = window.location;
			}
		});
	}
	
}

function showSecondToolbar(bar, obj){
	if(obj){
		$('#'+bar).css('left', $(obj).offset().left - $('#'+bar).width()/2 + 24);
	}
	$('#'+bar).show();
}

var lastSelected = null
function loadIssueGroup(id, page) {
	if(page) {
		page = page.substr(1, page.length-2)
	}
	else {
		page = 0
	}
	
	var loc = window.location.toString()
	i = loc.indexOf("#")
	if(i > 0) {
		loc = loc.substr(0, i)
	}
	window.location = loc + "#" + id + (page ? ("-" + page) : "")
	
	$.get("/userissues/" + id + "/loadgroup?start=" + page, function(data) {
		$(".normal-font").html(data)
	})
	
	if(lastSelected) {
		lastSelected.removeClass("tree-item-sel")
	}
	
	var _obj = $("#item-" + id);
	if(_obj.hasClass("_plus")) {
		(lastSelected = _obj.next()).addClass("tree-item-sel")
	}
	else {
		(lastSelected = _obj.children(0)).addClass("tree-item-sel")
	}
}

function openNodeTree(obj) {
	if(obj.attr("class") == "spoler") {
		switchSpoilerTree(obj.children(0).children(0))
		openNodeTree(obj.parent().parent())
	}
}

function loadURLGroup() {
	var loc = window.location.toString()
	i = loc.indexOf("#")
	if(i > 0) {
		loc = loc.substr(i+1).split("-", 10)
		loadIssueGroup(loc[0], loc[1] ? "/" + loc[1] + "?" : null)
		
		openNodeTree($("#item-" + loc[0]).parent().parent())
		//switchSpoilerTree($("#item-" + loc).parent().parent().children(0).children(0))
	}
}

function openLicence() {
	window.open("http://minecraft-galaxy.ru/licence/", "licence", "menubar=no,location=no,width=1000,height=600")
}

var can_vote = true;
function screen_vote(obj, screen){
	var voteId = $(obj).attr("vote-id");
	if(voteId == "votes"){
		return;
	}
	if(can_vote){
		can_vote = false;
		if(voteId){
			$(obj).attr("vote-id", "");
			var num = Number($(obj).find('span').html()) - 1;
			$(obj).find('span').html("<img src='/img/mini-loader.gif' width='15' height='10'/>");
			$.get("/screens/" + voteId + "/remove" + getKey(), function(data){
				$(obj).find('span').html(num);
				can_vote = true;
			});
		}
		else{
			$(obj).attr("vote-id", "voted");
			var num = Number($(obj).find('span').html()) + 1;
			$(obj).find('span').html("<img src='/img/mini-loader.gif' width='15' height='10'/>");
			$.get("/screens/" + screen + "/pos" + getKey(), function(data){
				if(data){
					$(obj).attr("vote-id", data);
					$(obj).find('span').html(num);
				}
				else{
					$(obj).attr("vote-id", "");
					$(obj).find('span').html(num - 1);
				}
				can_vote = true;
			});
		}
	}
}

function selectNode(node) {
	var range = document.createRange();
	range.selectNodeContents(node);
	window.getSelection().removeAllRanges();
	window.getSelection().addRange(range);
	document.execCommand("copy");
}

/**
 * Уведомления
 */
function clearDashboard() {
	$(".dashboard").remove()
	$.get("/dashboard/0/clear" + getKey())
}

function read_action(id) {
	$("#action-item-" + id).fadeOut()
	let counter = parseInt($("#ds-counter").html())
	$("#ds-counter").html(counter - 1)
	$.get("/dashboard/" + id + "/remove" + getKey())
	if (counter == 1) {
		$(".dashboard").remove()
	}
}

function do_action(id, url) {
	$.get("/dashboard/" + id + "/remove" + getKey(), function(){ window.location = url })
}

function showDashboard(obj) {
	obj.childNodes[1].style.maxHeight = "350px"
	$.get("/dashboard/0/list" + getKey(), function(data){
		$("#ds-action-list").html("")
		let list = JSON.parse(data);
		$("#ds-counter").html(list.length);
		for(let item of list) {
			let tools = '<a onclick="do_action(' + item.id + ', \'' + item.action + '\')">открыть</a>&nbsp;&nbsp;&nbsp;'
			tools += '<a onclick="read_action(' + item.id + ')">убрать</a>'
			$("#ds-action-list").append('<div class="item" id="action-item-' + item.id + '">' + item.text + '<div class="ds-item-controls">' + tools + '</div></div>')
		}
	})
}

function check_password(obj) {
	let list = []
	let scores = 0
	let data = [
		{ reg: /[0-9]+/, name: "цифры" },
		{ reg: /[a-zа-я]+/, name: "буквы в нижнем регистре" },
		{ reg: /[A-ZА-Я]+/, name: "буквы в верхнем регистре" },
		{ reg: /[^0-9a-zа-яA-ZА-Я]+/, name: "любые символы кроме цифр и букв" },
	]

	let pass = obj.value

	if (pass.length < 8) {
		$(obj).css("border-bottom", "3px solid #f32626")
		$("#pass-" + obj.name).css("color", "#f32626")
		$("#pass-" + obj.name).html("пароль должен содержать не менее 8 символов")
		return
	}

	for (let i of data) {
		if (pass.match(i.reg))
			scores++
		else
			list.push(i.name)
	}

	let hName = ["очень слабый пароль :(", "слабый пароль :/", "пароль нормальный :|", "пароль сильный! :)", "пароль очень сильный!!! ^_^"]

	let color = scores >= 2 ? "green" : "#f32626"
	if (scores === 2)
		color = "gray"
	$(obj).css("border-bottom", "3px solid " + color)
	let info = list.join(", ")
	$("#pass-" + obj.name).html(hName[scores] + (scores < 3 ? ", необходимо указать: " + info : ""))
	$("#pass-" + obj.name).css("color", color)
}
